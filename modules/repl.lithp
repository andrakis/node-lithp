% Module: REPL
%
% Provides a Read Execute Print Loop, allowing for an interactive interface.
%
% Currently only single lines are supported.
%
(
	(import readline)
	(import stderr)
	(import switch)

	(var ContinueLoop true)
	(var _ nil)
	(var DebugMode false)
	(var Result nil)

	(def nil # :: ((atom "nil")))

	(def local-eval (scope #Code :: (
		(if DebugMode (
			(lithp-debug true)
		))
		(set E (eval Code))
		(if DebugMode (
			(lithp-debug false)
		))
		(get E)
	)))

	(var CaseQuit (case "\\q" (scope # :: ((set ContinueLoop false)(nil)))))
	(var CaseUnderscore (case "_" (scope # :: (get _))))
	(var CaseDebugMode (case "\\d" (scope # :: (
		(set DebugMode (! (get DebugMode)))
		(print "Debug mode now " (? DebugMode "ON" "off"))
		(nil)
	))))
	(var DisplayHelp # :: (
		(print "Type standard Lithp expressions.")
		(print "Example: (var Fac #N::((if(== 0 N)((1))((* N(call Fac(- N 1)))))))(print (call Fac 10")
		(print "Or for a recursive factorial:")
		(print "((def f #N :: ( (def fi #N,A :: ( (if (== 1 N) ((A)) (else ((recurse (- N 1) (* N A)))) ) )) (fi N 1) )) (print (f 10)) )")
		(print "")
		(print "The following additional commands are available:")
		(print "  ?        Print this help")
		(print "  \\q       Quit the REPL")
		(print "  \\d       Toggle DEBUG mode")
		(print "  _        Print the last value")
		(print "")
		(nil)
	))
	(var CaseHelp1 (case "?" DisplayHelp))
	(var CaseHelp2 (case "help" DisplayHelp))

	(var CaseDefault (default (scope #Input :: (
		(set-top-level true)
		(try (
			(local-eval (+ "(" Input ")"))
		) #E :: (
			(stderr-write (+ "\nError during eval: " (to-string E) "\n"))
		))
	))))

	(var CaseList (list CaseQuit CaseUnderscore CaseDebugMode CaseHelp1
	                    CaseHelp2 CaseDefault))

	(def repl-input (scope #Input :: (
		(var Tmp (switch Input CaseList))
		(set Result (get Tmp))
		(print "Success, result: " Result)
		(set "_" (get Result))
		(set-top-level false)
	)))
	(export-global repl-input/1)

	(var LoopHandler (scope #Input :: (
		(repl-input Input)
		(repl-loop)
	)))

	(def repl-loop (scope # :: (
		(if ContinueLoop (
			(readline "> " LoopHandler)
		))
	)))

	(def set-repl-continue (scope #Bool :: (
		(set ContinueLoop (get Bool))
	)))

	(export-global repl-loop/0 set-repl-continue/1)
)
