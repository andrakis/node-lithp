% Module: stream
%
% Provides functions for working with streams.
(
	(try (
		(import buffer)

		(var FS (require "fs"))

		(def isTTY #Stream :: (
			(? (== (true) (index (stdin) isTTY)) true false)
		))

		(def readInputStream # :: (
			(if (isTTY (stdin)) (
				("")
			) (else (
				(read-stream-to-buffer (stdin))
			)))
		))

		(def stream-fd #Stream :: ((index Stream fd)))

		(var InputInitialized false)

		(def input-init (scope # :: (
			(if (! InputInitialized) (
				(invoke (stdin) setRawMode (true))
				(set InputInitialized true)
			))
		)))

		(def readInputStreamByte # :: (
			(input-init)
			(var Buf (buffer 1))
			(invoke (stdin) resume)
			(invoke FS readSync (stream-fd (stdin)) Buf 0 1)
			(invoke (stdin) pause)
			(to-string Buf (null) 0 1)
		))
		(export-global readInputStreamByte/0)

		(def writeOutputStreamByte #C :: (
			(invoke FS write (stream-fd (stdout)) C)
		))

		(def getc # :: ((readInputStreamByte)))
		(def putc #C :: ((writeOutputStreamByte C)))

		(export-global getc/0 putc/1)

		(var BufferSize 256)

		(def read-stream-to-buffer #Stream :: (
			(var Result "")
			(var BytesRead 1)
			(var Buf (buffer BufferSize))
			(while ((> BytesRead 0)) (
				(set BytesRead 0)
				(try (
					(set BytesRead (invoke FS readSync (stream-fd Stream) Buf 0 BufferSize))
					(set Result (+ Result (to-string Buf (null) 0 BytesRead)))
				) #E :: (
					(atom nil)
				))
			))
			(get Result)
		))

		(export-global isTTY/1 stream-fd/1 read-stream-to-buffer/1 readInputStream/0)
	) (catch #E :: (
		(print "Error loading stream: " E)
		(print "stream module unavailable")
	)))
)
