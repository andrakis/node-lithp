% Module: pivot
%
% Pivot a mathematical expression to reach a desired output.
%
% Example: (pivot 63 (list 0 1 2 4 8 16 32) (list + * - / | ^))
%  Yields: (^ 0 (^ 1 (| 2 (+ 4 (| 8 (+ 16 32))))))))
%
(
	(platform ext)

	(import lists)
	(import random)
	(import symbols)

	(var AttemptsDefault 50000)

	(def pivot #Desired,Nums,Ops :: (
		(var Current 0)
		(var Result nil)
		(var AttemptsRemaining (get AttemptsDefault))
		(var LastPrintNum (get AttemptsRemaining))
		(var I 0)
		(var Permutations (permutations Ops))
		(var PermutationsLength (length (get Permutations)))
		(var NumsTail (tail (get Nums)))
		(var NumsLength (length Nums))
		(var Str "")
		(while ((and (!= Current Desired) (> AttemptsRemaining 0))) (
			(set Str "")
			(var OpsToTry (index Permutations I))
			(set I (+ 1 (get I)))
			(if (>= I PermutationsLength) (
				(set I 0)
			))
			(var X 0)
			(var OptsToTryLength (length OpsToTry))
			(while ((and (< X OptsToTryLength) (!= Current Desired))) (
				(set X (+ 1 (get X)))
				(var OpsPadded (map NumsTail (scope #N :: ((list-rand OpsToTry)))))
				(each-idx Nums (scope #N,Idx :: (
					(var Op (+ "" (index OpsPadded Idx)))
					(if (!= "" Op) (
						(set Str (+ Str "(" Op " " N " "))
					) (else (
						(set Str (+ Str N ")"))
					)))
				)))
				(set Str (+ Str (repeat ")" NumsLength)))
				(set Current (eval Str))
				(set AttemptsRemaining (- AttemptsRemaining 1))
			))
			(if (>= (- LastPrintNum AttemptsRemaining) 100) (
				(set LastPrintNum (get AttemptsRemaining))
				(invoke (stdout) write (+ "\r" LastPrintNum))
			))
		))
		(if (== Current Desired) (
			(set Result (get Str))
		))
		(invoke (stdout) write "...Success:\n")
		(get Result)
	))

	(export-global pivot/3)

	(if (get-def 'PIVOT_TEST') (
		(var Numbers (list 1 5 2 2))
		(var Operators (list * +))
		(var Desired 20) % 1 * 5 * 2 + 2
		(print (pivot Desired Numbers Operators))
		(set Numbers (list 0 1 2 4 8 16 32))
		(set Operators (list + * - / | ^ ))
		% << >> | ^ / -))
		(print (pivot 63 Numbers Operators))
		(print (pivot 64 Numbers Operators))
	))
)
