(
	% Pattern matching
	(def is-number #V :: ((== number (typeof V))))
	(def is-string #V :: ((== string (typeof V))))
	(def is-function #V :: ((== function (typeof V))))
	(def is-function #V,Arity :: (
		(if (is-function V) (
			(== Arity (function-arity V))
		) (else (
			(atom false)
		)))
	))
	(def is-list #V :: ((== list (typeof V))))
	(def is-atom #V :: ((== atom (typeof V))))
	(def is-dict #V :: ((== dict (typeof V))))
	(def is-tuple #V:: ((== tuple (typeof V))))

	(export-global is-number/1 is-string/1 is-function/1 is-function/2
	               is-list/1   is-atom/1   is-dict/1     is-tuple/1)

	(def when/* #Handlers :: (
		(var Handler (head Handlers))
		(var Test (index Handler 0))
		(var Success (index Handler 1))
		(var TestResult false)
		(if (is-atom Test) (
			(set TestResult (get Test))
		) (else (
			(if (is-function Test) (
				(set TestResult (call Test))
			) (else (
				(throw "Unknown test given in when/*")
			)))
		)))
		(if (== true TestResult) (
			(call Success)
		) (else (
			% TODO: recurse doesn't work with arity * functions
			(if (> (length Handlers) 1) (
				(next when (tail Handlers))
			) (else (
				(throw "No matching clause in when")
			)))
		)))
	))

	(export-global when/*)

	(if (get-def 'MATCH_TEST') (
		(import assert)
		(assert (is-number 1)    "is-number integer check")
		(assert (is-number 1.00) "is-number float check")
		(assert (is-string "A")  "is-string check")
		(assert (is-list (list)) "is-list check")
		(assert (is-atom atom)   "is-atom check")
		(assert (is-function (scope # :: ((1)))) "is-function check")
		(assert (is-function (scope #A,B,C :: ((1))) 3) "is-function #/3 check")
		(assert (is-dict (dict)) "is-dict check")
		(assert (is-tuple (tuple)) "is-tuple check")
		(def test #What :: (
			(when
				(tuple (scope # :: ((is-string What)))   (scope # :: ((atom string))))
				(tuple (scope # :: ((is-function What))) (scope # :: ((atom function))))
				(tuple (scope # :: ((is-list What)))     (scope # :: ((atom list))))
				(tuple (scope # :: ((is-atom What)))     (scope # :: ((atom atom))))
				(tuple (scope # :: ((is-dict What)))     (scope # :: ((atom dict))))
				(tuple (scope # :: ((is-number What)))   (scope # :: ((atom number))))
				% Purposely do not include a "true" match to test that no match
				% throws an error.
				% Note that the is-tuple check is missing
			)
		))

		(assert (== number (test 1)) "when/* test: number")
		(assert (== string (test "123")) "when/* test: string")
		(try (
			(test (tuple foo))
			(throw "Uh oh")
		) #E :: (
			(if (== (exception-message E) "No matching clause in when") (
				% This is OK
				(atom true)
			) (else (
				(throw E)
			)))
		))

		% Unlike above test, this one will accept any given value because its
		% comparison function always returns true.
		(def test-any #What :: (
			(when (tuple true # :: (("PASS"))))
		))
		(assert (== "PASS" (test-any any)) "when/* test: success path")

		(print "Match tests succeeded")
	))
)
