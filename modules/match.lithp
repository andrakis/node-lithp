(
	% Pattern matching
	(def is-number #V :: ((== number (typeof V))))
	(def is-string #V :: ((== string (typeof V))))
	(def is-function #V :: ((== function (typeof V))))
	(def is-function #V,Arity :: (
		(if (is-function V) (
			(== Arity (function-arity V))
		) (else (
			(atom false)
		)))
	))
	(def is-list #V :: ((== list (typeof V))))
	(def is-atom #V :: ((== atom (typeof V))))
	(def is-dict #V :: ((== dict (typeof V))))

	(export-global is-number/1 is-string/1 is-function/1 is-function/2
	               is-list/1   is-atom/1   is-dict/1)

	(if (get-def 'MATCH_TEST') (
		(import assert)
		(assert (is-number 1)    "is-number integer check")
		(assert (is-number 1.00) "is-number float check")
		(assert (is-string "A")  "is-string check")
		(assert (is-function (scope # :: ((1)))) "is-function check")
		(assert (is-list (list)) "is-list check")
		(assert (is-atom atom)   "is-atom check")
		(assert (is-function (scope #A,B,C :: ((1))) 3) "is-function #/3 check")
		(assert (is-dict (dict)) "is-dict check")
		(print "Match tests succeeded")
	))
)
