% Tests variable scoping.
% Allows returned anonymous functions (which can be called) to retain access
% to parameters it had when it was called.
% Each call generates a new unique scope, parented to the scope that
% contained the parameters. This is provides functionality similar to how
% JavaScript closures work.
(
	% add/1 is a function that returns a scoped FunctionDefinition also of airty
	% that can be called to add the two numbers together.
	(def add #A :: (
		% scope/1 is a library function that ties the given anonymous function
		% to the call scope it was called in, allowing variables to be retained.
		(scope #B :: ((+ A B)))
	))
	(var Add5 (add 5))
	(var Add10 (add 10))
	(var N 10)
	(print "Add5 with " N ": " (call Add5 N))
	(print "Add10 with " N ": " (call Add10 N))
	(assert (== 15 (call Add5 10)))
)
