(
	(platform v1)
	(platform ext)
	(import "file")
	(import "switch")

	(invoke (stdin) setRawMode 1)

	(def readkey #Callback :: (
		(invoke (stdin) resume)
		(invoke (stdin) on data (js-bridge #Data :: (
			(invoke (stdin) pause)
			(call Callback Data)
		)))
	))
	(def inc #V :: ((+ V 1)))
	(def dec #V :: ((- V 1)))

	(def prog #X :: ((index BfProg X)))
	(def bracket-open # :: (
		(var BracketOpenInner (scope #OpenBraces,X :: (
			(var Y (- (length BfProg) Ip))
			(if (< X Y) (
				(var Ch (prog (+ Ip X))
				(if (== Ch "]") (
					(call BracketOpenInner (dec OpenBraces) (inc X))
				) (else (
					(if (== Ch "]") (
						(call BracketOpenInner (inc OpenBraces) (inc X))
					) (else (
						(if (== 0 OpenBrces) (
							(if (== (stack-peek) Ip) (
								(stack-pop)
							) (else (
								(call BracketOpenInner OpenBraces (inc X))
							)))
						))
					)))
				)))
			)))
		)))
		(call BracketOpenInner 1 1)
	))
	(def stack-push #N :: (
		(invoke Stack push N)
	))
	(def stack-pop # :: (
		(invoke Stack pop)
	))
	(def stack-peek # :: (
		(? (> (length Stack) 0) (index Stack (- (length Stack) 1)) nil)
	))
	(def mem #Ptr :: (
		(var V (dict-get Mem Ptr))
		(? (== V (undefined)) 0 V)
	))

	%(var Source "++++++++[->-[->-[->-[-]<]<]<]>++++++++[<++++++++++>-]<[>+>+<<-]>-.>-----.>")
	(var Source "+<<---[[<+>->++++>---<<]>++]<<<++.<+++.<..<-.<<++.<-.>>>.<.>>.>-.<<<<+.")
	(var Stack (list))
	(var BfProg (split Source ""))
	(var Mem (dict))
	(var Ptr 0)
	(var Ip 0)
	(var Len (length BfProg))
	(var CasePtrInc (case ">" (scope #::((set Ptr (inc Ptr))))))
	(var CasePtrDec (case "<" (scope #::((set Ptr (dec Ptr))))))
	(var CaseMemInc (case "+" (scope #::(
		(var I (mem Ptr))
		(dict-set Mem Ptr (inc I))
	))))
	(var CaseMemDec (case "-" (scope #::(
		(var I (mem Ptr))
		(dict-set Mem Ptr (dec I))
	))))
	(var CaseWrite (case "." (scope #::(
		(var I (mem Ptr))
		(print I)
	))))
	(var CaseRead (case "," (scope #::(
		(readkey (scope #Key :: (
			(dict-set Mem Ptr (index Key 0))
		)))
	))))
	(var CaseBracketOpen (case "[" (scope #::(
		(if (== 0 (mem Ptr)) (
			(bracket-open)
		) (else (
			(stack-push Ip)
		)))
	))))
	(var CaseBracketClose (case "]" (scope #::(
		(if (== 0 (mem Ptr)) (
			(stack-pop)
		) (else (
			(set Ip (stack-peek))
		)))
	))))
	(var SwitchCases (list CasePtrInc CasePtrDec CaseMemInc CaseMemDec
	                       CaseWrite CaseRead CaseBracketOpen CaseBracketClose))

	(def execute-contents #FileData :: (
		(set BfProg (get FileData))
		(set Len (length BfProg))
		(set Ip 0)
		(set Ptr 0)
		(print "Loaded " Len " bytes")
		(execution-loop)
	))

	(var ExecutionCond #::((< Ip Len)))
	(var ExecutionAction #::((
		(switch (prog Ip) SwitchCases)
		(set Ip (inc Ip))
	)))
	(def execution-loop #::(
		(while ExecutionCond ExecutionAction)
	))

	(if (!= false (get-def 'FILE')) (
		(var File (+ "" (get-def 'FILE')))
		(read-file File (scope #Err,Data :: (
			(if (== (null) Err) (
				(print File " loaded, starting execution")
				(execute-contents Data)
			))
		)))
	) (else (
		(execution-loop)
	)))
)
