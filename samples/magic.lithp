(
	(def m # :: (
		(var X (list 16 13 1 11 8 5 1 3 1 3 1 5 8 11 1 13))
		(var Y (list  0  1 1 0  1 0 0 1 0 1 0 0 1  0 1  1))
		(var I 0) (var N 0) (def n #A,B :: (
			(if (!= 0 (length A)) (
				(set I (+ I (* (- 1 (* 2 (head B))) (head A))))
				(set Z (list)) (set N (+ N 1))
				(if (== 4 N) ((set Z (list "|")) (set N 0)))
				(++ (list I) Z (n (tail A) (tail B)))
			) (else ((list))))
		)) (n X Y)
	))
	(def m #::((var X (list 16 13 1 11 8 5 1 3 1 3 1 5 8 11 1 13)) (var Y (list 0 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1)) (var I 0) (var N 0) (def n #A,B :: ((if (!= 0 (length A)) ((set I (+ I (* (- 1 (* 2 (head B))) (head A)))) (set Z (list)) (set N (+ N 1)) (if (== 4 N) ((set Z (list "|")) (set N 0))) (++ (list I) Z (n (tail A) (tail B)))) (else ((list)))))) (n X Y)))
	(print (m))
)
